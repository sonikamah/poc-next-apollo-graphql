{"version":3,"file":"static/webpack/static\\development\\pages\\caching.js.606eb44032e5700110dd.hot-update.js","sources":["webpack:///./pages/caching.js"],"sourcesContent":["import { ApolloProvider } from \"react-apollo\";\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport App from '../components/Caching/clientQueryApp';\r\nimport ClientWriteData from '../components/Caching/ClientWriteData';\r\nimport ResetStore from '../components/Caching/onResetStore';\r\nimport ResolverUpdatePost from '../components/Caching/ResolverUpdatePost';\r\nimport Header from '../components/Header';\r\nimport gql from 'graphql-tag'\r\n\r\n\r\nconst cache = new InMemoryCache();\r\n\r\nconst link = new HttpLink({\r\n    uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn', // Server URL (must be absolute)\r\n    opts: {\r\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\r\n    }\r\n});\r\n\r\nconst GET_VOTES = gql`\r\n    query allPosts($first: Int!, $skip: Int!) {\r\n      allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\r\n        id\r\n        title\r\n        votes\r\n        url\r\n        createdAt\r\n      }\r\n      _allPostsMeta {\r\n        count\r\n      }\r\n    }\r\n  `\r\n\r\nconst resolvers = {\r\n    Mutation: {\r\n      updatePost: (_root, variables, { cache, getCacheKey }) => {\r\n        const {allPosts} = cache.readQuery({ query: GET_VOTES, variables: {first: 10, skip: 0} });\r\n        // var index = allPosts.findIndex(x => x.id === variables.id);\r\n        debugger;\r\n        const myNewVotes = {\r\n            id: '6',\r\n            title: 'Start using Apollo Client.',\r\n            votes: 1234\r\n        };\r\n         cache.writeData({\r\n            query:  GET_VOTES, variables: {first: 10, skip: 0},\r\n            data: {\r\n                allPosts: [...data.allPosts, myNewVotes]\r\n            }\r\n        });\r\n        return null;\r\n      },\r\n    }\r\n}\r\n\r\nconst client = new ApolloClient({\r\n  cache,\r\n  resolvers,\r\n  link\r\n});\r\n\r\nconst data = {\r\n    todos: [],\r\n    visibilityFilter: 'SHOW_ALL',\r\n    networkStatus: {\r\n        __typename: 'NetworkStatus',\r\n        isConnected: false,\r\n    },\r\n};\r\n\r\ncache.writeData({ data });\r\n\r\nconst Caching = () => (\r\n    <ApolloProvider client={client}>\r\n        <Header/>\r\n        1. <App />\r\n        2. <ClientWriteData/> <br/><br/>\r\n        3. <ResetStore/> <br/><br/>\r\n        4. <ResolverUpdatePost/>\r\n    </ApolloProvider>\r\n)\r\nexport default Caching;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAeA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAFA;AAMA;AACA;AAjBA;AADA;AAsBA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;AAQA;;;;A","sourceRoot":""}