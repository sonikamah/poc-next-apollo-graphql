{"version":3,"file":"static/webpack/static\\development\\pages\\caching.js.0d70b4060c2ded088e95.hot-update.js","sources":["webpack:///./components/Caching/clientQueryApp.js","webpack:///./pages/caching.js"],"sourcesContent":["import gql from \"graphql-tag\";\r\nimport { Component } from 'react'\r\nimport { withApollo } from 'react-apollo';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemContainer,\r\n  Num,\r\n  A\r\n} from '../ApolloPostList/styles';\r\n\r\nconst GET_POSTS = gql`\r\n  query allPosts($first: Int!, $skip: Int!) {\r\n    allPosts(orderBy: createdAt_DESC, first: $first, skip: $skip) {\r\n      id\r\n      title\r\n      votes\r\n      url\r\n      createdAt\r\n    }\r\n    _allPostsMeta {\r\n      count\r\n    }\r\n  }\r\n`\r\nconst skip = 0;\r\nconst variables = {\r\n    first: 10,\r\n    skip: 0\r\n}\r\n\r\n\r\nclass clientQueryApp extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      allPosts: null\r\n    }\r\n    this.clientQuery = this\r\n      .clientQuery\r\n      .bind(this);\r\n  }\r\n\r\n  async clientQuery() {\r\n    var {data} = await this.props.client.query({ query: GET_POSTS, skip, variables});\r\n    this.setState({allPosts: data.allPosts});\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <>\r\n          <button onClick={this.clientQuery}>\r\n            Test!\r\n          </button>\r\n          <br/><br/>\r\n          <List>\r\n          {this.state.allPosts && this.state.allPosts.map((post, index) => (\r\n            <ListItem key={post.id}>\r\n              <ListItemContainer>\r\n                <Num>{index + 1}. </Num>\r\n                <A href={post.url}>{post.title}</A>\r\n              </ListItemContainer>\r\n            </ListItem>\r\n          ))}\r\n          </List>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withApollo(clientQueryApp);","import { ApolloProvider } from \"react-apollo\";\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport App from '../components/Caching/clientQueryApp';\r\nimport Header from '../components/Header';\r\n\r\n\r\nconst cache = new InMemoryCache();\r\nconst link = new HttpLink({\r\n    uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn', // Server URL (must be absolute)\r\n    opts: {\r\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\r\n    }\r\n  })\r\n\r\nconst client = new ApolloClient({\r\n  cache,\r\n  link\r\n})\r\n\r\nconst Caching = () => (\r\n    <ApolloProvider client={client}>\r\n        <Header/>\r\n        <App />\r\n    </ApolloProvider>\r\n)\r\nexport default Caching;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAQA;AAcA;AACA;AACA;AACA;AAFA;AACA;AAKA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AANA;AASA;AACA;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAWA;;;;AArCA;AACA;AAuCA;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAKA;;;;A","sourceRoot":""}